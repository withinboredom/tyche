{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAEA,IAAI,UAAU,QAAQ,WAAR,CAAd;;AAEA,QACK,OADL,CACa,OADb;;;;;AAMA,QAAQ,OAAR,CAAgB,MAAhB,EAAwB,WAAxB,CAAoC,6BAApC,EAAmE,MAAnE,CAA0E,YAAM;;AAE/E,CAFD;;AAIA,QAAQ,OAAR,CAAgB,iBAAhB,EAAmC,WAAnC,CAA+C,sBAA/C,EAAuE,MAAvE,CAA8E,UAAC,OAAD,EAAa;;AAEvF,YAAQ,GAAR,CAAY,OAAZ;AACH,CAHD;;AAKA,QAAQ,OAAR,CAAgB,6BAAhB,EAA+C,WAA/C,CAA2D,2CAA3D,EAAwG,MAAxG,CAA+G,UAAC,OAAD,EAAU,OAAV,EAAsB;;AAEjI,YAAQ,GAAR,CAAY,OAAZ,EAAqB,OAArB;AACH,CAHD;;AAKA,QAAQ,OAAR,CAAgB,iBAAhB,EAAmC,WAAnC,CAA+C,yBAA/C,EAA0E,MAA1E,CAAiF,UAAC,OAAD,EAAa;AAC1F,YAAQ,GAAR,CAAY,OAAZ;AACH,CAFD;;AAIA,QAAQ,OAAR,CAAgB,6BAAhB,EAA+C,WAA/C,CAA2D,mBAA3D,EAAgF,MAAhF,CAAuF,UAAC,MAAD,EAAS,UAAT,EAAwB;AAC3G,YAAQ,GAAR,CAAY,MAAZ,EAAoB,UAApB;AACH,CAFD;;AAIA,QAAQ,OAAR,CAAgB,QAAhB,EAA0B,WAA1B,CAAsC,wBAAtC,EAAgE,MAAhE,CAAuE,YAAM;;AAE5E,CAFD;;AAIA,QAAQ,OAAR,CAAgB,gBAAhB,EAAkC,WAAlC,CAA8C,gDAA9C,EAAgG,MAAhG,CAAuG,UAAC,OAAD,EAAa;AAChH,YAAQ,GAAR,CAAY,OAAZ;AACH,CAFD;;AAIA,QAAQ,OAAR,CAAgB,4BAAhB,EAA8C,KAA9C,CAAoD,QAApD,EAA8D,WAA9D,CAA0E,iCAA1E,EAA6G,MAA7G,CAAoH,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrI,YAAQ,GAAR,CAAY,OAAZ,EAAqB,MAArB;AACH,CAFD;;AAIA,QAAQ,KAAR,CAAc,QAAQ,IAAtB","file":"index-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n    .version('0.0.1');\n\n//todo: read the configuration file\n//todo: read repo state\n\nprogram.command('init').description('initialize the current repo').action(() => {\n    //todo: install git hooks!\n});\n\nprogram.command('build [project]').description('runs a given project').action((project) => {\n    //todo: build a project\n    console.log(project);\n});\n\nprogram.command('exec <project> <command...>').description('run a command in the context of a project').action((project, command) => {\n    //todo: exec in a project\n    console.log(project, command);\n});\n\nprogram.command('start [project]').description('start running a project').action((project) => {\n    console.log(project);\n});\n\nprogram.command('do <action> [parameters...]').description('perform an action').action((action, parameters) => {\n    console.log(action, parameters);\n});\n\nprogram.command('status').description('get the current status').action(() => {\n    //todo: calculate the current status\n});\n\nprogram.command('test [project]').description('only run the unit tests for a specific project').action((project) => {\n    console.log(project);\n});\n\nprogram.command('release <version> <target>').alias('deploy').description('release a version into the wild').action((version, target) => {\n    console.log(version, target);\n});\n\nprogram.parse(process.argv);\n"]}